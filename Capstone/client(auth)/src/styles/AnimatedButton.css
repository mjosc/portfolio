.AnimatedButton {
  width: 11.8em;
  height: 2.94em;
  position: relative;
  /* Though this is a wrapper, simulate the display of a traditional button. */
  display: inline-block;
  border-radius: 9px;
  /* Hide animation overflow (ellipse) */
  overflow: hidden;
  /* Prevent overflow bug on border-radius */
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
  /* Default color. This prop may be overridden by the parent component. */
  background-color: #B83B25;
}
.AnimatedButton .hoverable {
  /* Do not inherit. This would cause the animation's width to be
   * disproportional to its height. The intended effect is a circle of diameter
   * equivalent to the parent's height.
   */
	width: 13rem;
  height: 13rem;
  /* Span has no content. */
  position: absolute;
  left: 50%;
	top: 50%;
  margin: calc(13rem / -2) calc(13rem / -2);
  z-index: 0;
	transform-origin: center;
  transition: 0.75s;
  /* Prevent the underlying span from receiving pointer events and causing the
   * animation to terminate prematurely.
   */
  pointer-events: none;
  border-radius: 50%;
  /* Default color. This prop may be overridden by the parent component. */
  background-color: #F03211;
}
.AnimatedButton .button {
	width: 100%;
  height: 100%;
  /* Required for z-index functionality in order to bring the button to the top
   * of the stack.
   */
  position: relative;
  /* Reset traditional button props. */
	outline: none;
	border: none;
  border-radius: inherit;
  /* Let the underlying animation show through on hover. */
	background: none;
	font-size: 1.125em;
  font-weight: 700;
  color: #04242e; 
}
.AnimatedButton .unhovered {
  transform: scale(0);
}
.AnimatedButton .hovered {
  transform: scale(1);
}
.AnimatedButton .clicked {
  background-color: #9A1700;
}
.AnimatedButton .disabled {
  background-color: #1D5467;
  pointer-events: none;
}